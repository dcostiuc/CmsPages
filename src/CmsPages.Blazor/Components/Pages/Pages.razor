@page "/pages"
@attribute [Authorize(CmsPagesPermissions.Pages.Default)]
@using CmsPages.Permissions
@using Volo.Abp.Application.Dtos
@using CmsPages.Pages
@using CmsPages.Localization
@using Blazorise
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inject IStringLocalizer<CmsPagesResource> L
@inject AbpBlazorMessageLocalizerHelper<CmsPagesResource> LH
@inject PageAppService PageAppService
@inherits AbpCrudPageBase<IPageAppService, PageDto, Guid, PageFilterDto, CreateUpdatePageDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Pages"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (HasCreatePermission)
                {
                    <Button Color="Color.Primary" Clicked="OpenCreateModalAsync">@L["NewPage"]</Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="PageDto" Filterable="true" Data="Entities" ReadData="OnDataGridReadAsync"
            CurrentPage="CurrentPage" TotalItems="TotalCount" ShowPager="true" PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="PageDto" @ref="@EntityActionsColumn" Filterable="false">
                    <DisplayTemplate>
                        <EntityActions TItem="PageDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="PageDto" Text="@L["Edit"]" Visible=HasUpdatePermission
                                Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="PageDto" Text="@L["Delete"]" Visible=HasDeletePermission
                                Clicked="() => DeleteEntityAsync(context)"
                                ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="PageDto" Field="@nameof(PageDto.Title)" Caption="@L["Title"]"></DataGridColumn>
                <DataGridColumn TItem="PageDto" Field="@nameof(PageDto.RouteName)" Caption="@L["RouteName"]">
                </DataGridColumn>
                <DataGridColumn TItem="PageDto" Field="@nameof(PageDto.IsHomePage)" Filterable="false"
                    Caption="@L["IsHomePage"]"> 
                </DataGridColumn>
                <DataGridColumn TItem="PageDto" Field="@nameof(PageDto.CreationTime)" Filterable="false"
                    Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewPage"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Title">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["RouteName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.RouteName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Content"]</FieldLabel>
                        <RichTextEdit @ref="@createContentEditor" />
                    </Field>
                    <Field>
                        <div class="d-flex align-items-center gap-2">
                            <label for="isHomePageCheckboxCreate"
                                class="form-check-label mb-0">@L["SetToHomePage"]</label>
                            <Check TValue="bool" Id="isHomePageCheckboxCreate" @bind-Checked="@NewEntity.IsHomePage" />
                        </div>
                    </Field>


                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
                    Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Title</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Title">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["RouteName"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.RouteName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Content"]</FieldLabel>
                        <RichTextEdit @ref="@EditContentEditor" />
                    </Field>
                    <Field>
                        <div class="d-flex align-items-center gap-2">
                            <label for="isHomePageCheckboxEdit"
                                class="form-check-label mb-0">@L["SetToHomePage"]</label>
                            <Check TValue="bool" Id="isHomePageCheckboxEdit"
                                @bind-Checked="@EditingEntity.IsHomePage" />
                        </div>
                    </Field>


                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
                    Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@code
{
    private RichTextEdit createContentEditor;
    private RichTextEdit EditContentEditor;

    protected override Task UpdateGetListInputAsync()
    {
        if (GetListInput is ISortedResultRequest sorted)
        {
            sorted.Sorting = CurrentSorting;
        }

        if (GetListInput is IPagedResultRequest paged)
        {
            paged.SkipCount = (CurrentPage - 1) * PageSize;
        }

        if (GetListInput is ILimitedResultRequest limited)
        {
            limited.MaxResultCount = PageSize;
        }

        return Task.CompletedTask;
    }

    protected override Task OnDataGridReadAsync(DataGridReadDataEventArgs<PageDto> e)
    {
        var titleColumn = e.Columns.FirstOrDefault(c => c.SearchValue != null && c.Field == nameof(PageDto.Title));
        GetListInput.Title = titleColumn?.SearchValue?.ToString() ?? string.Empty;

        var routeNameColumn = e.Columns.FirstOrDefault(c => c.SearchValue != null && c.Field == nameof(PageDto.RouteName));
        GetListInput.RouteName = routeNameColumn?.SearchValue?.ToString() ?? string.Empty;

        return base.OnDataGridReadAsync(e);
    }

    protected override async Task CreateEntityAsync()
    {
        var rawContent = await createContentEditor.GetHtmlAsync();

        NewEntity.Content = PageAppService.GetDecodedAndSanitizedPageContentAsync(rawContent);

        await base.CreateEntityAsync();
    }

    protected override async Task UpdateEntityAsync()
    {
        var rawContent = await EditContentEditor.GetHtmlAsync();

        EditingEntity.Content = PageAppService.GetDecodedAndSanitizedPageContentAsync(rawContent);

        await base.UpdateEntityAsync();
    }

    protected override async Task OpenCreateModalAsync()
    {
        await base.OpenCreateModalAsync();

        if (createContentEditor != null)
        {
            await createContentEditor.SetHtmlAsync(string.Empty);
        }
    }

    protected override async Task OpenEditModalAsync(PageDto entity)
    {
        await base.OpenEditModalAsync(entity);

        await InvokeAsync(async () =>
        {
            if (EditContentEditor != null)
            {
                await EditContentEditor.SetHtmlAsync(EditingEntity?.Content ?? string.Empty);
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await createContentEditor.SetHtmlAsync(NewEntity?.Content ?? string.Empty);
        }
    }

    public Pages()
    {
        CreatePolicyName = CmsPagesPermissions.Pages.Create;
        UpdatePolicyName = CmsPagesPermissions.Pages.Edit;
        DeletePolicyName = CmsPagesPermissions.Pages.Delete;

        LocalizationResource = typeof(CmsPagesResource);
    }
}
